"use strict";(self.webpackChunknotus_docs=self.webpackChunknotus_docs||[]).push([[2543],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=a,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||i;return r?n.createElement(m,o(o({ref:t},l),{},{components:r})):n.createElement(m,o({ref:t},l))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3499:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={},p="Sasha",c={unversionedId:"Overview/Basics/Concept/Cryptography/Hash/Sasha",id:"Overview/Basics/Concept/Cryptography/Hash/Sasha",title:"Sasha",description:"Currently, this documentation is in the draft stage. It may contain word correct or incorrect information",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/Overview/Basics/Concept/Cryptography/Hash/Sasha.md",sourceDirName:"Overview/Basics/Concept/Cryptography/Hash",slug:"/Overview/Basics/Concept/Cryptography/Hash/Sasha",permalink:"/Overview/Basics/Concept/Cryptography/Hash/Sasha",draft:!1,editUrl:"https://github.com/notus-labs/docs/tree/main/docs/Overview/Basics/Concept/Cryptography/Hash/Sasha.md",tags:[],version:"current",frontMatter:{},sidebar:"overview",previous:{title:"Transaction",permalink:"/Overview/Basics/Concept/Transaction"},next:{title:"Network",permalink:"/Overview/Basics/Concept/Network/intro"}},l={},u=[{value:"Before Starting Tours",id:"before-starting-tours",level:2},{value:"First Round",id:"first-round",level:2},{value:"Second Round",id:"second-round",level:2},{value:"Output",id:"output",level:2}],d={toc:u};function h(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sasha"},"Sasha"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Currently, this documentation is in the draft stage. It may contain word correct or incorrect information"))),(0,i.kt)("p",null,"The Sasha hash method consists of two rounds."),(0,i.kt)("p",null,"It uses Ripemd160, SHA1, MD5, and Blake2B hash structures.\nBoth rounds contain four additions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function SashaHash(data: string, reverseArray: boolean = true, replaceChar: boolean = true): string\n")),(0,i.kt)("p",null,"Reference: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Notus-Network/NotusJS/blob/main/src/core/hash.ts"},"src/core/hash.ts:11")),(0,i.kt)("h2",{id:"before-starting-tours"},"Before Starting Tours"),(0,i.kt)("p",null,"If the data is to be reversed, it is inverted. For example:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Input: NRHf747BCHuFvpzDWpxrXvKm1hNBruM7eNmUH4")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Output: 4HUmNe7MurBNh1mKvXrxpWDzpvFuHCB747fHRN")),(0,i.kt)("p",null,"With Blake2B, the hash of the text is taken, divided into 16 characters and an array is obtained."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"var Blake2BArray = SplitByLength(Blake2BHash(data), 16);")),(0,i.kt)("p",null,"With MD5, the text is hashed, divided into 4 characters and an array is obtained."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"var Md5Array = SplitByLength(Md5Hash(data), 4);")),(0,i.kt)("p",null,"With SHA1, the hash of the text is taken, divided into 5 characters and an array is obtained."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"var Sha1Array = SplitByLength(Sha1Hash(data), 5);")),(0,i.kt)("p",null,"With Ripemd160, the hash of the text is taken, divided into 5 characters and an array is obtained."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"var Ripemd160Array = SplitByLength(Ripemd160Hash(data), 5);")),(0,i.kt)("h2",{id:"first-round"},"First Round"),(0,i.kt)("p",null,"In the first round, the nth element of the Blake2B, MD5, SHA1 and Ripemd160 arrays is added to a string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"for (var i = 0; i < 8; i++) {\n    if (i < 4) {\n      res =\n        res + Blake2BArray[i] + Md5Array[i] + Sha1Array[i] + Ripemd160Array[i];\n    }\n...\n")),(0,i.kt)("h2",{id:"second-round"},"Second Round"),(0,i.kt)("p",null,"In the second round, the previous values \u200b\u200bare summed in reverse. In reversed-order; Ripemd160, SHA1, MD5 and Blake2B."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"else {\n      res =\n        res + Ripemd160Array[i] + Sha1Array[i] + Md5Array[i] + Blake2BArray[i];\n    }\n  }\n")),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,'If the output is "',(0,i.kt)("em",{parentName:"p"},"Default Hex Text"),'", the third parameter is given as true. In this way, certain characters are replaced with the ReplaceChar function.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const DefaultHexAlphabetString = "0123456789abcdef";\nconst SimpleHashAlphabetForHexResult = "fedcba9876543210";\n\nfunction ReplaceChar(sourceText: string, fromText: string, toText: string) {\n  var input = sourceText.split("");\n  var replaced: boolean[] = [];\n  for (var j = 0; j < input.length; j++) replaced[j] = false;\n  for (var i = 0; i < fromText.length; i++) {\n    for (var j = 0; j < input.length; j++) {\n      if (replaced[j] === false && input[j] === fromText[i]) {\n        input[j] = toText[i];\n        replaced[j] = true;\n      }\n    }\n  }\n  return input.join("");\n}\n')),(0,i.kt)("p",null,"If not requested, the output is returned as it is."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"return res;\n")))}h.isMDXComponent=!0}}]);